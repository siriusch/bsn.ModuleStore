! -----------------------------------------------------------------------------------
! T-SQL Script Analyzer
! -----------------------------------------------------------------------------------

"Name"         = 'T-SQL CREATE Statements'
"Version"      = '2005'
"About"        = 'Parser for T-SQL CREATE statements to get names'

"Start Symbol" = <Root>

! =============================================================================
! Comments
! =============================================================================

Comment Start = '/*'
Comment End   = '*/'
Comment Line  = '--'

! =============================================================================
! Terminals
! =============================================================================

{String Ch}        = {Printable} - ["]
{Id Ch Standard}   = {Alphanumeric} + [_]
{Id Ch Extended}   = {Printable} - ['['] - [']']
{Hex Ch}           = [0123456789ABCDEF]

StringLiteral   = (''{String Ch}*'')+
IntegerLiteral  = {Digit}+
RealLiteral     = {Digit}+'.'{Digit}+
HexLiteral      = 0x{Hex Ch}+

! We use a simplified name convention, which does not allow user/schema, database or server to be specified
Id             = {Letter}{Id Ch Standard}* | '['{Id Ch Extended}+']' | '"'{Id Ch Standard}*'"'
LocalId        = '@'{Letter}{Id Ch Standard}*
TableId        = '#'?{Letter}{Id Ch Standard}* | '[''#'?{Id Ch Extended}+']' | '"''#'?{Id Ch Standard}*'"'
LocaleId       = {Alpha}+('-'{Alpha}+)?

! =============================================================================
! Start Symbol and Common Names
! =============================================================================

<Root> ::= <Create Stm>
         | <Create Stm> ';'

<Create Stm> ::= <Create Fulltext>
               | <Create Function>
               | <Create Index>
               | <Create Table>

<Column Name> ::= Id

<Function Name> ::= Id

<Index Name> ::= Id

<Parameter Name> ::= LocalId

<Variable Name> ::= LocalId

<Table Name> ::= TableId

<Table Name Qualified> ::= <Table Name>
                         | <Schema Name> '.' <Table Name>

<Type Name> ::= Id

<Type Name Qualified> ::= <Type Name>
                        | <Schema Name> '.' <Type Name>

<Schema Name> ::= Id

<LCID> ::= HexLiteral
         | IntegerLiteral
         | LocaleId

<Optional As> ::= AS
                |

! =============================================================================
! Parameter Lists for Functions and Procedures
! =============================================================================

<Parameter Group> ::= '(' <Parameter List> ')'
                    | '(' ')'

<Parameter List> ::= <Parameter List> ',' <Parameter>
                   | <Parameter>

<Parameter> ::= <Parameter Name> <Optional As> <Type Name Qualified> <Parameter Default>

<Parameter Default> ::= '=' DEFAULT
                      |

! =============================================================================
! CREATE FULLTEXT
! =============================================================================

! We don't allow to specify the catalog name, since the catalog is automatically assigned (module name)

<Create Fulltext> ::= CREATE FULLTEXT INDEX ON TABLE <Table Name> <Fulltext Column Group> KEY INDEX <Index Name> <Fulltext Change Tracking>

<Fulltext Column Group> ::= '(' <Fulltext Column List> ')'
                          |

<Fulltext Column List> ::= <Fulltext Column List> ',' <Fulltext Column>
                         | <Fulltext Column>

<Fulltext Column> ::= <Column Name> <Fulltext Column Type> <Fulltext Column Language>

<Fulltext Column Type> ::= TYPE COLUMN <Fulltext Column Type Name>
                         |

<Fulltext Column Type Name> ::= CHAR
                              | NCHAR
                              | VARCHAR
                              | NVARCHAR

<Fulltext Column Language> ::= LANGUAGE <LCID>
                             |

<Fulltext Change Tracking> ::= WITH CHANGE_TRACKING <Fulltext Change Tracking Name>
                             |

<Fulltext Change Tracking Name> ::= MANUAL
                                  | AUTO
                                  | OFF
                                  | OFF ',' NO POPULATION

! =============================================================================
! CREATE FUNCTION
! =============================================================================

! We don't allow to specify the schema name, it is implicit (module name)

<Create Function> ::= CREATE FUNCTION <Function Name> <Parameter Group> RETURNS <Function Type>

<Function Type> ::= <Function Scalar>
                  | <Function Inline>
                  | <Function Table>

<Function Scalar> ::= <Type Name> <Function Option Group> <Optional As> BEGIN <Function Body> RETURN <Scalar Expression> END

<Function Inline> ::= TABLE <Function Option Group> <Optional As> RETURN <Function Inline Select>

<Function Inline Select> ::= <Select Stm>
                           | '(' <Select Stm> ')'

<Function Table> ::= <

<Function Option Group> ::= WITH <Function Option>
                          |

! The options ENCRYPTION and SCHEMABINDING are handled by the module and therefore not allowed

<Function Option> ::= RETURNS NULL ON NULL INPUT
                    | CALLED ON NULL INPUT



<Function Body> ?
<Scalar Expression> ?
<Select Stm> ?

/*


<Create Index> ::= CREATE <Unique> INDEX IntegerLiteral ON Id '(' <Order List> ')' <With Clause>
                
<Create Table> ::= CREATE TABLE Id '(' <Field Def List> ')' <Constraint Opt>

<Unique>      ::= UNIQUE
                |

<With Clause> ::= WITH PRIMARY
                | WITH DISALLOW NULL
                | WITH IGNORE NULL
                |

<Field Def>   ::= Id <Type> NOT NULL
                | Id <Type>

<Field Def List> ::= <Field Def> ',' <Field Def List>
                   | <Field Def>

<Type>        ::= <Fixed Type>
                | <Variable Type> '(' <Type Length> ')' <Collation>

<Type Length> ::= IntegerLiteral
                | MAX

<Collation>   ::= COLLATE Id
                |

<Fixed Type>  ::= BIT
                | TINYINT
                | SMALLINT
                | INT
                | BIGINT
                | CHAR
                | NCHAR
                | FLOAT
                | REAL
                | UNIQUEIDENTIFIER
                | XML

<Variable Type> ::= VARCHAR
                  | NVARCHAR
                  | BINARY

<Constraint Opt>  ::= <Constraint>
                    |

<Constraint>      ::= CONSTRAINT Id <Constraint Type>
                    | CONSTRAINT Id

<Constraint Type> ::= PRIMARY KEY '(' <Id List> ')'
                    | UNIQUE      '(' <Id List> ')'
                    | NOT NULL    '(' <Id List> ')'
                    | FOREIGN KEY '(' <Id List> ')' REFERENCES Id '(' <Id List> ')'

<Drop Stm>        ::= DROP TABLE Id
                    | DROP INDEX Id ON Id

! =============================================================================
! Update database contents
! =============================================================================

<Insert Stm>    ::= INSERT INTO Id '(' <Id List> ')' <Select Stm>
                  | INSERT INTO Id '(' <Id List> ')' VALUES '(' <Expr List> ')'

<Update Stm>    ::= UPDATE Id SET <Assign List> <Where Clause>

<Assign List>   ::= Id '=' <Expression> ',' <Assign List>
                  | Id '=' <Expression> 

<Delete Stm>    ::= DELETE FROM Id <Where Clause>

! =============================================================================
! Select Statement
! =============================================================================

<Select Stm>    ::= SELECT <Columns> <Into Clause> <From Clause> <Where Clause> <Group Clause> <Having Clause> <Order Clause>

<Columns>       ::= <Restriction> '*'
                  | <Restriction> <Column List>

<Column List>   ::= <Column Item> ',' <Column List>
                  | <Column Item>

<Column Item>   ::= <Column Source>
                  | <Column Source> Id      !ALIAS   
                  
<Column Source> ::= <Aggregate> 
                  | Id                

<Restriction>   ::= ALL
                  | DISTINCT
                  |

<Aggregate>     ::= Count  '(' '*' ')'           
                  | Count  '(' <Expression> ')'
                  | Avg    '(' <Expression> ')'
                  | Min    '(' <Expression> ')'
                  | Max    '(' <Expression> ')'
                  | StDev  '(' <Expression> ')'
                  | StDevP '(' <Expression> ')'
                  | Sum    '(' <Expression> ')'
                  | Var    '(' <Expression> ')'
                  | VarP   '(' <Expression> ')'

<Into Clause>   ::= INTO Id
                  |

<From Clause>   ::= FROM <Id List> <Join Chain>

<Join Chain>    ::= <Join> <Join Chain>
                  |

<Join>          ::= INNER JOIN <Id List> ON Id '=' Id                  
                  | LEFT  JOIN <Id List> ON Id '=' Id                  
                  | RIGHT JOIN <Id List> ON Id '=' Id                  
                  |       JOIN <Id List> ON Id '=' Id                  


<Where Clause>  ::= WHERE <Expression>
                  |

<Group Clause>  ::= GROUP BY <Id List>
                  |

<Order Clause>  ::= ORDER BY <Order List>
                  |

<Order List>    ::= ID <Order Type> ',' <Order List>
                  | ID <Order Type>

<Order Type>    ::= ASC
                  | DESC
                  |

<Having Clause> ::= HAVING <Expression>
                  |

! ============================================================================= 
! Expressions
! =============================================================================

<Expression>  ::= <And Exp> OR <Expression>
                | <And Exp>

<And Exp>     ::= <Not Exp> AND <And Exp>
                | <Not Exp>

<Not Exp>     ::= NOT <Pred Exp>
                | <Pred Exp>

<Pred Exp>    ::= <Add Exp> BETWEEN <Add Exp> AND <Add Exp>
                | <Add Exp> NOT BETWEEN <Add Exp> AND <Add Exp>
                | <Value> IS NOT NULL
                | <Value> IS NULL
                | <Add Exp> LIKE StringLiteral
                | <Add Exp> IN   <Tuple>
                | <Add Exp> '='  <Add Exp>
                | <Add Exp> '<>' <Add Exp>
                | <Add Exp> '!=' <Add Exp>
                | <Add Exp> '>'  <Add Exp>
                | <Add Exp> '>=' <Add Exp>
                | <Add Exp> '<'  <Add Exp>
                | <Add Exp> '<=' <Add Exp>
                | <Add Exp>

<Add Exp>     ::= <Add Exp> '+' <Mult Exp>
                | <Add Exp> '-' <Mult Exp>
                | <Mult Exp>

<Mult Exp>    ::= <Mult Exp> '*' <Negate Exp> 
                | <Mult Exp> '/' <Negate Exp>
                | <Negate Exp>

<Negate Exp>  ::= '-' <Value>
                | <Value>
        
<Value>       ::= <Tuple>
                | ID
                | IntegerLiteral
                | RealLiteral
                | StringLiteral
                | NULL

<Tuple>       ::= '(' <Select Stm> ')'
                | '(' <Expr List> ')'

<Expr List>  ::= <Expression> ',' <Expr List>
               | <Expression>

<Id List>     ::= <Id Member> ',' <Id List> 
                | <Id Member>

<Id Member>   ::= Id
                | Id Id

*/